using System.Collections.Generic;
using UnityEngine;
using UnityEditor;

public class AutoGrassGenerator : EditorWindow
{
    private int objectCount = 10; // 생성할 오브젝트 수
    private GameObject parent; // 생성할 프리팹의 부모
    private GameObject prefab; // 생성할 프리팹
    private Vector3 startPosition = Vector3.zero; // 시작 위치
    
    private Vector2Int minRange = new Vector2Int(-20,-20);
    private Vector2Int maxRange = new Vector2Int(20,20);
    
    private Texture2D heightMap;
    
    [MenuItem("Tools/Auto Placement Tool")]
    public static void ShowWindow()
    {
        GetWindow<AutoGrassGenerator>("Auto Grass Generate Tool");
    }

    private void OnGUI()
    {
        GUILayout.Label("게임 오브젝트 자동 배치", EditorStyles.boldLabel);
        
        objectCount = EditorGUILayout.IntField("오브젝트 수:", objectCount);
        parent = (GameObject)EditorGUILayout.ObjectField("부모 오브젝트", parent, typeof(GameObject), true);
        prefab = (GameObject)EditorGUILayout.ObjectField("프리팹:", prefab, typeof(GameObject), false);
        startPosition = EditorGUILayout.Vector3Field("시작 위치:", startPosition);
        minRange = EditorGUILayout.Vector2IntField("최소 범위", minRange);
        maxRange = EditorGUILayout.Vector2IntField("최대 범위", maxRange);
        
        heightMap = EditorGUILayout.ObjectField("높이 텍스처", heightMap, typeof(Texture2D), false) as Texture2D;

        if (GUILayout.Button("생성 및 배치"))
        {
            CreateAndPlaceObjects();
        }
    }

    private void ClearTerrain()
    {
        List<GameObject> childrensToDestroy = new List<GameObject>();
        for (int i = 0; i < parent.transform.childCount; i++)
        {
            childrensToDestroy.Add(parent.transform.GetChild(i).gameObject);
        }
        foreach (var children in childrensToDestroy)
        {
            DestroyImmediate(children);
        }
        childrensToDestroy.Clear();

    }

    void CreateTerrainMesh()
    {
        var meshFilter = prefab.GetComponent<MeshFilter>();
        var mesh = meshFilter.sharedMesh;

        Color[] pixels = heightMap.GetPixels();

        // get vertices
        // 1. Get the vertices of the mesh
        List<Vector3> vertices = new List<Vector3>();
        mesh.GetVertices(vertices);
        
        // 2. Get the UVs of the mesh
        List<Vector2> uvs = new List<Vector2>();
        mesh.GetUVs(0, uvs);
        
        
        
    }
    
    private void CreateAndPlaceObjects()
    {
        if (parent == null)
        {
            Debug.LogError("부모를 설정해주세요!");
            return;
        }
        
        if (prefab == null)
        {
            Debug.LogError("프리팹을 설정해주세요!");
            return;
        }

        ClearTerrain();

        var meshFilter = prefab.GetComponent<MeshFilter>();
        var mesh = meshFilter.sharedMesh;
        
        
        
        
        var bounds = mesh.bounds;
        var offset = bounds.extents;
        
        for (int x = minRange.x; x < maxRange.x; x++)
        {
            for (int y = minRange.y; y < maxRange.y; y++)
            {
                Vector3 position = startPosition + new Vector3(x * offset.x, 0,  y * offset.z); // 간격을 두고 생성
                GameObject obj = Instantiate(prefab, position, Quaternion.identity);
                obj.transform.SetParent(parent.transform);
                obj.name = $"AutoGenerated_{x}_{y}"; // 이름 설정
            }
        }
    }
}

